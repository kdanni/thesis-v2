<?xml version="1.0"?>
<!-- edited with XMLSpy v2007 sp2 (http://www.altova.com) by V W (eMeter) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.emeter.com/energyip/meterdatainterface"
	targetNamespace="http://www.emeter.com/energyip/meterdatainterface" elementFormDefault="qualified"
	attributeFormDefault="unqualified">
	<xs:complexType name="MessageHeader">
		<xs:annotation>
			<xs:documentation>Message header containing descriptive information about the message.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:annotation>
				<xs:documentation>
					General information regarding the message payload. These fields are used to provide application
					context. The fields are not intended to be a complete list of properties used by middleware for
					message management.
				</xs:documentation>
			</xs:annotation>
			<xs:element name="verb" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						This enumerated list of verbs that can be used to form message types in compliance with the IEC
						61968 standard. get - Meter Data Request reply - Meter Data Response create - Send Meter Data
						created - Optional confirmation of receipt of Meter Data
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="cancel" />
						<xs:enumeration value="canceled" />
						<xs:enumeration value="change" />
						<xs:enumeration value="changed" />
						<xs:enumeration value="create" />
						<xs:enumeration value="created" />
						<xs:enumeration value="close" />
						<xs:enumeration value="closed" />
						<xs:enumeration value="delete" />
						<xs:enumeration value="deleted" />
						<xs:enumeration value="get" />
						<xs:enumeration value="show" />
						<xs:enumeration value="request" />
						<xs:enumeration value="reply" />
						<xs:enumeration value="subscribe" />
						<xs:enumeration value="unsubscribe" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="noun" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The Noun of the Control Area identifies the main subject of the message type, typically a real
						world object defined in the CIM. Intended usage - MeterData
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="revision" type="xs:string" default="1" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Revision level of the message type.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="dateTime" type="xs:dateTime" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Application level relevant time and date for when this instance of the message type was
						produced. This is not intended to be used by middleware for message management.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="source" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Source system. May be used for invocation context authorization</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="messageID" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Unique message ID to be used for correlating replies and tracking messages
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="asyncReplyTo" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						If reply is expected to be async then the proptocol specific address where reply needs to be
						sent
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="utilityId" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Header" type="tns:MessageHeader" />
	<xs:complexType name="ReplyHeader">
		<xs:sequence>
			<!--
				<xs:element name="correlationId" type="xs:string" minOccurs="0"/>
			-->
			<xs:element name="replyCode" type="xs:string" minOccurs="0" />
			<xs:element name="replyText" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CustomerAccount">
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject">
				<xs:sequence>
					<xs:element name="billingCycle" type="xs:string" minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ErpAddress">
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject">
				<xs:sequence>
					<xs:element name="streetNumber" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The designator of the specific location
								on the street.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="streetName" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The name of the street.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="streetSuffix" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Suffix to the street name. For examle,
								North, South, East, West.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="streetPrefix" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Prefix to the street name. For examle,
								North, South, East, West.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="streetType" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Type of street. Examples include:
								street, circle, boulevard, avenue, road,
								drive, etc.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="poBox" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The post office box.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="suiteNumber" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The number of the apartment or suite.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="addressGeneral" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Additional address information, for
								example a mailstop.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="city" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name of city.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="stateOrProvince" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name of the state or province.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="country" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name of the country.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="postalCode" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Postal code for the address.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ServiceLocation">
		<xs:complexContent>
			<xs:extension base="tns:ErpAddress">
				<xs:sequence>
					<xs:element name="nearestIntersection"
						type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The names of streets at the nearest
								intersection to work area.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="subdivision" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name, identifier, or description of the
								subdivision, if applicable, in which
								work is to occur.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="lot" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name, identifier, or description of the
								lot, if applicable, in which work is to
								occur.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="block" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Name, identifier, or description of the
								block, if applicable, in which work is
								to occur.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="locationType" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The type of location: geographical,
								functional accounting, other.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="locationCode" type="xs:string"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								A codified representation of the
								location.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="latitude" type="xs:string"
						minOccurs="0" />
					<xs:element name="longitude" type="xs:string"
						minOccurs="0" />
					<xs:element name="locationAccuracy" type="xs:string"
						minOccurs="0" />
					<xs:element name="locationAccuracyUnits"
						type="xs:string" minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReadingType">
		<xs:sequence>
			<xs:element name="mRID" type="xs:string" minOccurs="0" />
			<xs:element name="measurementType" type="xs:string" minOccurs="0" />
			<xs:element name="touBinNumber" type="xs:string" minOccurs="0" />
			<xs:element name="unit" type="xs:string" minOccurs="0" />
			<xs:element name="touCode" type="xs:string" minOccurs="0" />
			<xs:element name="channelNumber" type="xs:int" minOccurs="0" />
			<xs:element name="logicalChannelNumber" type="xs:int" minOccurs="0" />
			<xs:element name="aggregateTimePeriod" type="xs:string" minOccurs="0" />
			<xs:element name="intervalLength" type="xs:int" minOccurs="0" />
			<xs:element name="readSequence" type="xs:string" minOccurs="0" />
			<xs:element name="precision" type="xs:int" minOccurs="0" />
			<xs:element name="scale" type="xs:int" minOccurs="0" />
			<xs:element name="direction" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="IntervalBlock">
		<xs:sequence>
			<xs:choice minOccurs="0">
				<xs:element name="readingTypeId" type="xs:string" />
				<xs:element name="ReadingType" type="tns:ReadingType" />
			</xs:choice>
			<xs:element name="IReading" type="tns:IReading" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="IReading">
		<xs:sequence>
			<xs:element name="startTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="endTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="intervalLength" type="xs:int" minOccurs="0" />
			<xs:element name="value" type="xs:double" minOccurs="0" />
			<xs:element name="demandPeakTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="measurementSource" type="xs:string" minOccurs="0" />			
			<xs:element name="quality" type="tns:Quality" minOccurs="0"/>		
			<xs:element name="flags" type="xs:long" minOccurs="0" />
			<xs:element name="status" type="xs:long" minOccurs="0" />
			<xs:element name="collectionTime" type="xs:dateTime" minOccurs="0" />			
		</xs:sequence>
	</xs:complexType>
	<!-- Added for VEE7.0 -->
	<xs:complexType name="Quality">
		<xs:sequence>				
			<xs:element name="validationStatus" type="xs:string" minOccurs="0" />
			<xs:element name="changeMethod" type="xs:string" minOccurs="0" />
			<xs:element name="failCode" type="xs:string" minOccurs="0" />			
			<!-- Interval record can be locked.  Locked means that interval cannot be updated by any other entity, except for certain manual edits. -->
			<xs:element name="locked" type="xs:boolean" minOccurs="0" />
			<!-- ESITMATED flag.  Can contain values (E,M,F).  
					E - Estimated: could be estimated by EIP or external system.  
					M - Manual: Manually Entered.  
					F - Forward Estimated: Estimating an interval in the future. -->
			<xs:element name="estimated" type="xs:string" 
				minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Reading">
		<xs:complexContent>
			<xs:extension base="tns:IReading">
				<xs:sequence>
					<xs:choice minOccurs="0">
						<xs:element name="readingTypeId" type="xs:string" />
						<xs:element name="ReadingType" type="tns:ReadingType" />
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>




	<xs:complexType name="MeterReading">
		<xs:annotation>
			<xs:documentation>
				Only IntervalBlock element will be output in v1 of this service implementation.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ServiceDeliveryPoint"
				type="tns:ServiceDeliveryPoint" minOccurs="0" />
			<xs:element name="Meter" type="tns:MeterAsset"
				minOccurs="0" />
			<xs:element name="ComFunction" type="tns:ComFunction"
				minOccurs="0" />
			<xs:element name="CustomerAccount"
				type="tns:CustomerAccount" minOccurs="0" />
            <xs:element name="ServiceLocation" type="tns:ServiceLocation" minOccurs="0" maxOccurs="1"></xs:element>
           <!-- EIP-14428 -->
            <xs:element name="Channel"
				type="tns:Channel" minOccurs="0" />  

			<xs:element name="DistributionNode"
				type="tns:DistributionNode" minOccurs="0" />
			<!-- EIP-14428 Ends-->  
            <xs:element name="Reading" type="tns:Reading" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="IntervalBlock" type="tns:IntervalBlock"
				minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="Event" type="tns:Event" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="MeterReading" type="tns:MeterReading" />

	<xs:complexType name="MeterReadings">
		<xs:sequence>
			<xs:element name="startTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="endTime" type="xs:dateTime" minOccurs="0" />
			<xs:element ref="tns:MeterReading" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MeterDataRequest">
		<xs:sequence>
			<xs:element name="startTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="endTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="versionTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="objectIdType" type="xs:string" minOccurs="0" />
			<xs:element name="objectIdNamespace" type="xs:string" minOccurs="0" />
			<xs:element name="objectId" type="xs:string" />
			<xs:element name="measurementProfile" type="xs:string" minOccurs="0" />
			<!--
				<xs:element name="organisationCode" type="xs:string" minOccurs="0"/>
			-->
			<xs:element name="eventCategory" type="xs:string" minOccurs="0" />
			<xs:element name="retrieveReads" type="xs:boolean" minOccurs="0" />
			<xs:element name="retrieveEvents" type="xs:boolean" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="RequestMessage">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Header" type="tns:MessageHeader" />
				<xs:element name="Request" type="tns:MeterDataRequest" minOccurs="0" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="ReplyMessage">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Header" type="tns:MessageHeader" />
				<xs:element name="Reply" type="tns:ReplyHeader" minOccurs="0" />
				<xs:element name="Payload" type="tns:MeterReadings" minOccurs="0" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="Event">
		<xs:sequence>
			<xs:element name="category" type="xs:string" minOccurs="0" />
			<xs:element name="name" type="xs:string" minOccurs="0" />
			<xs:element name="timestamp" type="xs:dateTime" minOccurs="0" />
			<xs:element name="description" type="xs:string" minOccurs="0" />
			<xs:element name="argument" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="name" type="xs:string" />
						<xs:element name="value" type="xs:string" />
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="source" type="xs:string" minOccurs="0" />
			<xs:element name="collectionTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="eventStartTime" type="xs:dateTime" minOccurs="0" />
			<xs:element name="threshold" type="xs:double" minOccurs="0" />
			<xs:element name="measuredValue" type="xs:double" minOccurs="0" />
			<xs:element name="duration" type="xs:double" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:element name="MeterDataMessage">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Header" type="tns:MessageHeader" />
				<xs:element name="Payload" type="tns:MeterReadings" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- EIP-14428 -->
	<xs:complexType name="DistributionNode">
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject"/>		
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Channel">
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject"/>		
		</xs:complexContent>
	</xs:complexType>
	<!-- EIP-14428 Ends-->
	<xs:complexType name="Asset">
		<xs:annotation>
			<xs:documentation>
				A tangible resource of the utility, like equipment like Meter, ComFunction etc. This is the parent class
				for asset sub classes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject">
				<xs:sequence>
					<xs:element name="manufacturer" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Manufacturer name</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="modelNumber" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Manufacturer's model number.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="manufacturedDate" type="xs:dateTime" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Data asset was manufactured.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="serialNumber" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Serial number of asset.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="lotNumber" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								Even for the same model and version number, many assets are manufactured in lots. The
								lotNumber identifies the specific lot for this asset.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="testDate" type="xs:dateTime" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The date and time this asset was last tested .</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MeterAsset">
		<xs:complexContent>
			<xs:extension base="tns:Asset">
				<xs:sequence>
					<xs:element name="serviceType" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Gas, Water or Electric</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:choice maxOccurs="1" minOccurs="0">
						<xs:element name="electricMeter" type="tns:ElectricMeter" minOccurs="0" />
						<xs:element name="waterMeter" type="tns:WaterMeter" minOccurs="0" />
						<xs:element name="gasMeter" type="tns:GasMeter" minOccurs="0" />
					</xs:choice>
					<xs:element name="numDigits" type="xs:integer" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The number of dials on the meter register for an electromechanical meter; for an
								electronic meter, the number of digits on the meter display.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="typeMeter" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>diaphram, rotary or pulse</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ElectricMeter">
		<xs:sequence>
			<xs:element name="aepCode" type="xs:string" minOccurs="0" />
			<xs:element name="form" type="xs:string" minOccurs="0" />
			<xs:element name="base" type="xs:string" minOccurs="0" />
			<xs:element name="voltageRating" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The service voltage at which the meter is designed to operate. Typical voltage ratings in North
						America are 120, 240, 277 or 480V.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="currentRating" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The current class of the meter. Typical current classes in North America are 10, 20, 100, 200,
						or 320 Amps.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="frequencyRating" type="xs:string" minOccurs="0" />
			<xs:element name="numPhases" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The number of phases for this service point.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="numWires" type="xs:string" minOccurs="0" />
			<xs:element name="kh" type="xs:string" minOccurs="0" />
			<xs:element name="registerRatio" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="WaterMeter">
		<xs:sequence>
			<xs:element name="inletDiameter" type="xs:string" minOccurs="0" />
			<xs:element name="outletDiameter" type="xs:string" minOccurs="0" />
			<xs:element name="operatingPressure" type="xs:string" minOccurs="0" />
			<xs:element name="flowRange" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="GasMeter">
		<xs:sequence>
			<xs:element name="operatingPressure" type="xs:string" minOccurs="0" />
			<xs:element name="flowRange" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="ComFunction">
		<xs:complexContent>
			<xs:extension base="tns:Asset">
				<xs:sequence>
					<xs:element name="amrAddress" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The communication ID number (e.g. serial number, IP address, telephone number, etc.) of
								the AMR module which serves this meter.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="amrSystem" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>
								The metering system responsible for communications to the meter.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ObjectName">
		<xs:sequence>
			<xs:element name="id" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Object instance identifier</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="idType" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Type of identifier. For e.g. for a Meter this can be METER_BADGE_ID or METER_UDC_ASSET_ID. For a
						meter communicaiton module this can be METER_COMMUNICATION_MODULE_NETWORK_ID
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="idNamespace" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						The namespace within which the id is defined. Multiple tokens in the namespace can be separated
						by the forward slash character. The interpretation of namespace tokens is dependent on the type
						of identifier. For e.g. for METER_UDC_ASSET_ID namespace will be populated with the
						organisationCode (utility id)
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="IdentifiedObject">
		<xs:sequence>
			<xs:choice id="id" minOccurs="1">
				<xs:element name="id" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Object instance identifier for EIPGeneric File</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mRID" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Object instance identifier</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
			<xs:element name="idType" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Type of identifier. For e.g. for a Meter this can be METER_BADGE_ID or METER_UDC_ASSET_ID. For a
						meter communicaiton module this can be METER_COMMUNICATION_MODULE_NETWORK_ID
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:choice id="namespace" minOccurs="1">
				<xs:element name="idNamespace" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							The namespace within which the id is defined. Multiple tokens in the namespace can be
							separated by the forward slash character. The interpretation of namespace tokens is
							dependent on the type of identifier. For e.g. for METER_UDC_ASSET_ID namespace will be
							populated with the organisationCode (utility id)
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="pathName" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							The namespace within which the id is defined. Multiple tokens in the namespace can be
							separated by the forward slash character. The interpretation of namespace tokens is
							dependent on the type of identifier. For e.g. for METER_UDC_ASSET_ID namespace will be
							populated with the organisationCode (utility id)
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<!--  <xs:complexType name="IdentifiedObject">
		<xs:complexContent>
		<xs:extension base="tns:ObjectName">
		<xs:sequence>
		<xs:element name="mRID" type="xs:string" minOccurs="0">
		<xs:annotation>
		<xs:documentation>Object instance identifier</xs:documentation>
		</xs:annotation>
		</xs:element>
		<xs:element name="pathName" type="xs:string" minOccurs="0">
		<xs:annotation>
		<xs:documentation>
		The namespace within which the id is defined. Multiple tokens in the namespace can be
		separated by the forward slash character. The interpretation of namespace tokens is
		dependent on the type of identifier. For e.g. for METER_UDC_ASSET_ID namespace will be
		populated with the organisationCode (utility id)
		</xs:documentation>
		</xs:annotation>
		</xs:element>
		</xs:sequence>
		</xs:extension>
		</xs:complexContent>
		</xs:complexType>-->
	<xs:complexType name="ServiceDeliveryPoint">
		<xs:complexContent>
			<xs:extension base="tns:IdentifiedObject">
				<xs:sequence>
					<xs:element name="serviceType" type="xs:string" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Service type: Gas, Water, Electric.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="lifeSupport" type="xs:boolean" minOccurs="0" />
					<xs:element name="readRoute" type="tns:IdentifiedObject" minOccurs="0" />
					<xs:element name="readSequence" type="xs:string" minOccurs="0" />
					<xs:element name="averageDailyUsage" type="xs:double" minOccurs="0" />
					<xs:element name="locationCode" type="xs:string" />
					<xs:element name="serviceDeliveryRemarks" type="xs:string" />
					<xs:element name="latitude" type="xs:double" />
					<xs:element name="longitude" type="xs:double" />
					<xs:element name="locationAccuracy" type="xs:string" minOccurs="0" />
					<xs:element name="locationAccuracyUnits" type="xs:string" minOccurs="0" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

</xs:schema>
